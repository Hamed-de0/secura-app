"""update framework version

Revision ID: 92f4000b728f
Revises: 92evidlifecycle
Create Date: 2025-08-29 22:42:28.223782

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '92f4000b728f'
down_revision: Union[str, Sequence[str], None] = '92evidlifecycle'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_evidence_lifecycle_events_evidence_id_created_at'), table_name='evidence_lifecycle_events')
    op.drop_table('evidence_lifecycle_events')
    op.add_column('framework_activation_policies', sa.Column('framework_version_id', sa.Integer(), nullable=False))
    op.add_column('framework_activation_policies', sa.Column('scope_type', sa.String(length=32), nullable=False))
    op.add_column('framework_activation_policies', sa.Column('scope_id', sa.Integer(), nullable=False))
    op.add_column('framework_activation_policies', sa.Column('is_enabled', sa.Boolean(), nullable=False))
    op.add_column('framework_activation_policies', sa.Column('start_date', sa.DateTime(), nullable=False))
    op.add_column('framework_activation_policies', sa.Column('end_date', sa.DateTime(), nullable=True))
    op.add_column('framework_activation_policies', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('framework_activation_policies', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.alter_column('framework_activation_policies', 'priority',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index('ix_fap_priority', 'framework_activation_policies', ['priority'], unique=False)
    op.create_index('ix_fap_scope', 'framework_activation_policies', ['scope_type', 'scope_id'], unique=False)
    op.create_index('ix_fap_version', 'framework_activation_policies', ['framework_version_id'], unique=False)
    op.drop_constraint(op.f('framework_activation_policies_asset_type_id_fkey'), 'framework_activation_policies', type_='foreignkey')
    op.drop_constraint(op.f('framework_activation_policies_asset_group_id_fkey'), 'framework_activation_policies', type_='foreignkey')
    op.drop_constraint(op.f('framework_activation_policies_asset_tag_id_fkey'), 'framework_activation_policies', type_='foreignkey')
    op.drop_constraint(op.f('framework_activation_policies_framework_id_fkey'), 'framework_activation_policies', type_='foreignkey')
    op.create_foreign_key(None, 'framework_activation_policies', 'framework_versions', ['framework_version_id'], ['id'], ondelete='CASCADE')
    op.drop_column('framework_activation_policies', 'asset_type_id')
    op.drop_column('framework_activation_policies', 'effective_to')
    op.drop_column('framework_activation_policies', 'asset_tag_id')
    op.drop_column('framework_activation_policies', 'framework_id')
    op.drop_column('framework_activation_policies', 'effective_from')
    op.drop_column('framework_activation_policies', 'asset_group_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('framework_activation_policies', sa.Column('asset_group_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('framework_activation_policies', sa.Column('effective_from', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('framework_activation_policies', sa.Column('framework_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('framework_activation_policies', sa.Column('asset_tag_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('framework_activation_policies', sa.Column('effective_to', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('framework_activation_policies', sa.Column('asset_type_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'framework_activation_policies', type_='foreignkey')
    op.create_foreign_key(op.f('framework_activation_policies_framework_id_fkey'), 'framework_activation_policies', 'frameworks', ['framework_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('framework_activation_policies_asset_tag_id_fkey'), 'framework_activation_policies', 'asset_tags', ['asset_tag_id'], ['id'])
    op.create_foreign_key(op.f('framework_activation_policies_asset_group_id_fkey'), 'framework_activation_policies', 'asset_groups', ['asset_group_id'], ['id'])
    op.create_foreign_key(op.f('framework_activation_policies_asset_type_id_fkey'), 'framework_activation_policies', 'asset_types', ['asset_type_id'], ['id'])
    op.drop_index('ix_fap_version', table_name='framework_activation_policies')
    op.drop_index('ix_fap_scope', table_name='framework_activation_policies')
    op.drop_index('ix_fap_priority', table_name='framework_activation_policies')
    op.alter_column('framework_activation_policies', 'priority',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('framework_activation_policies', 'updated_at')
    op.drop_column('framework_activation_policies', 'created_at')
    op.drop_column('framework_activation_policies', 'end_date')
    op.drop_column('framework_activation_policies', 'start_date')
    op.drop_column('framework_activation_policies', 'is_enabled')
    op.drop_column('framework_activation_policies', 'scope_id')
    op.drop_column('framework_activation_policies', 'scope_type')
    op.drop_column('framework_activation_policies', 'framework_version_id')
    op.create_table('evidence_lifecycle_events',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('evidence_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('actor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['evidence_id'], ['control_evidence.id'], name=op.f('evidence_lifecycle_events_evidence_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('evidence_lifecycle_events_pkey'))
    )
    op.create_index(op.f('ix_evidence_lifecycle_events_evidence_id_created_at'), 'evidence_lifecycle_events', ['evidence_id', 'created_at'], unique=False)
    # ### end Alembic commands ###
