from sqlalchemy.orm import Session
from app.models.assets.asset_type_vulnerability_link import AssetTypeVulnerabilityLink
from app.schemas.assets.asset_type_vulnerability_link import AssetTypeVulnerabilityLinkCreate, AssetTypeVulnerabilityLinkInsert
from app.models.risks.vulnerability import Vulnerability
from typing import List
from fastapi import HTTPException, status

def create_link(db: Session, link: AssetTypeVulnerabilityLinkCreate):
    db_link = AssetTypeVulnerabilityLink(**link.dict())
    db.add(db_link)
    db.commit()
    db.refresh(db_link)
    return db_link

def create_link_bulk(db: Session, payload: List[AssetTypeVulnerabilityLinkInsert]):
    result = []
    for v in payload:
        vuln = resolve_vulnerability_id(db, v.reference_code, v.name)

    for v in payload:
        vuln = resolve_vulnerability_id(db, v.reference_code, v.name)
        if vuln:
            res = create_link(db, AssetTypeVulnerabilityLinkCreate(
                asset_type_id= v.asset_type_id,
                vulnerability_id= vuln,
                score= v.score,
                justification= v.justification
            ))
            result.append(res)
    return result

def get_links_by_asset_type(db: Session, asset_type_id: int):
    return db.query(AssetTypeVulnerabilityLink).filter_by(asset_type_id=asset_type_id).all()

def get_links_by_asset_type_by_name(db: Session, asset_type_id: int):
    results = (
        db.query(
            AssetTypeVulnerabilityLink.id,
            AssetTypeVulnerabilityLink.vulnerability_id,
            AssetTypeVulnerabilityLink.asset_type_id,
            AssetTypeVulnerabilityLink.score,
            AssetTypeVulnerabilityLink.justification,
            Vulnerability.reference_code,
            Vulnerability.name,
            Vulnerability.category,
            Vulnerability.source,
            Vulnerability.description,
        )
        .join(Vulnerability, Vulnerability.id == AssetTypeVulnerabilityLink.vulnerability_id)
        .filter(AssetTypeVulnerabilityLink.asset_type_id == asset_type_id)
        .all()
    )

    return results


def delete_link(db: Session, link_id: int):
    db.query(AssetTypeVulnerabilityLink).filter_by(id=link_id).delete()
    db.commit()

def resolve_vulnerability_id(db: Session, reference_code: str, name: str, validate: bool=False) -> int:
    vul = (
        db.query(Vulnerability)
        .filter(Vulnerability.name == name).one_or_none()
    )
    if not vul:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Vulnerability not found='{reference_code}' & name='{name}'."
        )
        # Helpful diagnostic: is code present but name mismatch?
        # by_code = db.query(Vulnerability).filter(Vulnerability.reference_code == reference_code).one_or_none()
        # if by_code:
        #     # if validate:
        #     #     return f"Vulnerability name mismatch for reference_code '{reference_code}'. Expected '{by_code.name}'."
        #     #
        #     raise HTTPException(
        #         status_code=status.HTTP_400_BAD_REQUEST,
        #         detail=f"Vulnerability name mismatch for reference_code '{reference_code}'. "
        #                f"Expected '{by_code.name}'."
        #     )
        # raise HTTPException(
        #     status_code=status.HTTP_400_BAD_REQUEST,
        #     detail=f"Vulnerability not found for reference_code='{reference_code}' & name='{name}'."
        # )
    return vul.id

