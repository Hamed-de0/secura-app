from sqlalchemy.orm import Session
from app.models.vulnerability import Vulnerability
from app.schemas.vulnerability import VulnerabilityCreate, VulnerabilityUpdate

def create_vulnerability(db: Session, data: VulnerabilityCreate):
    vuln = Vulnerability(**data.dict())
    db.add(vuln)
    db.commit()
    db.refresh(vuln)
    return vuln

def read_vulnerabilities(db: Session, skip=0, limit=100):
    return db.query(Vulnerability).offset(skip).limit(limit).all()

def read_vulnerability(db: Session, vuln_id: int):
    return db.query(Vulnerability).filter(Vulnerability.id == vuln_id).first()

def update_vulnerability(db: Session, vuln_id: int, data: VulnerabilityUpdate):
    vuln = db.query(Vulnerability).filter(Vulnerability.id == vuln_id).first()
    if not vuln:
        return None
    for key, value in data.dict(exclude_unset=True).items():
        setattr(vuln, key, value)
    db.commit()
    db.refresh(vuln)
    return vuln

def delete_vulnerability(db: Session, vuln_id: int):
    vuln = db.query(Vulnerability).filter(Vulnerability.id == vuln_id).first()
    if not vuln:
        return None
    db.delete(vuln)
    db.commit()
    return vuln
