from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.schemas.vulnerability import *
from app.crud import vulnerability as crud
from app.database import SessionLocal

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

router = APIRouter(prefix="/vulnerabilities", tags=["Vulnerabilities"])

@router.post("/", response_model=VulnerabilityRead)
def create(data: VulnerabilityCreate, db: Session = Depends(get_db)):
    return crud.create_vulnerability(db, data)

@router.get("/", response_model=list[VulnerabilityRead])
def read_all(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    return crud.read_vulnerabilities(db, skip, limit)

@router.get("/{vuln_id}", response_model=VulnerabilityRead)
def read(vuln_id: int, db: Session = Depends(get_db)):
    vuln = crud.read_vulnerability(db, vuln_id)
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    return vuln

@router.put("/{vuln_id}", response_model=VulnerabilityRead)
def update(vuln_id: int, data: VulnerabilityUpdate, db: Session = Depends(get_db)):
    vuln = crud.update_vulnerability(db, vuln_id, data)
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    return vuln

@router.delete("/{vuln_id}", response_model=VulnerabilityRead)
def delete(vuln_id: int, db: Session = Depends(get_db)):
    vuln = crud.delete_vulnerability(db, vuln_id)
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    return vuln
