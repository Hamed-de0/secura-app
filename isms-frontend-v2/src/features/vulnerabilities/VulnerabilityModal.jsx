import React, { useEffect, useState, useMemo } from 'react';
import {
  Box, Modal, Typography, Select, MenuItem,
  FormControl, FormControlLabel, InputLabel, Button, Switch
} from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import { getVulnerabilities } from './api'; // define this API

export default function VulnerabilityModal({ open, onClose, onSelect, linkedIds = new Set() }) {
  const [vulns, setVulns] = useState([]);
  const [category, setCategory] = useState('All');
  const [hideLinked, setHideLinked] = useState(true); 

  useEffect(() => {
    if (open) {
      getVulnerabilities().then(setVulns);
    }
  }, [open]);

  const categories = useMemo(() => {
    if (!Array.isArray(vulns)) return ['All'];
    const cats = vulns.map(v => v.category).filter(Boolean);
    return ['All', ...new Set(cats)];
  }, [vulns]);

  const filtered = useMemo(() => {
    let rows = Array.isArray(vulns) ? vulns : [];
    if (category !== 'All') rows = rows.filter(v => v.category === category);
    if (hideLinked) rows = rows.filter(v => !linkedIds.has(v.id));
    return rows;
  }, [vulns, category, hideLinked, linkedIds]);

  

  const columns = [
    { field: 'reference_code', headerName: 'Code', width: 100 },
    { field: 'name', headerName: 'Name', flex: 1 },
    { field: 'category', headerName: 'Category', width: 150 },
    { field: 'source', headerName: 'Source', width: 150 },
    {
      field: 'actions',
      headerName: 'Action',
      width: 120,
      renderCell: (params) => (
        <Button
          //{...params.getValue(params.row.id, 'actions')}
          size="small"
          variant="contained"
          onClick={() => {
            // console.log('Selected vulnerability:', params.row);
            onSelect(params.row)}}
        >
          Add
        </Button>
      )
    }
  ];

  return (
    <Modal open={open} onClose={onClose}>
      <Box sx={{ p: 3, backgroundColor: 'white', m: '10% auto', width: '80%', maxHeight: '80vh', overflowY: 'auto' }}>
        <Typography variant="h6" gutterBottom>Select Vulnerability</Typography>

        <FormControl size="small" sx={{ mb: 2, minWidth: 200 }}>
          <InputLabel>Category</InputLabel>
          <Select value={category} label="Category" onChange={e => setCategory(e.target.value)}>
            {categories.map(cat => (
              <MenuItem key={cat} value={cat}>{cat}</MenuItem>
            ))}
          </Select>
        </FormControl>

        <FormControlLabel
            control={
              <Switch
                checked={hideLinked}
                onChange={(e) => setHideLinked(e.target.checked)}
              />
            }
            label="Hide linked"
            sx={{ ml: 3 }}
        />

        <DataGrid
          autoHeight
          rows={filtered}
          columns={columns}
          getRowId={(row) => row.id}
        />
      </Box>
    </Modal>
  );
}
